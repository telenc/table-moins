// Test isol√© du service de chiffrement (sans Electron)
const { encryptionService } = require('./dist/main/shared/utils/encryption');

async function testEncryption() {
  console.log('üîê Test du service de chiffrement TableMoins\n');
  
  try {
    // Test du service de chiffrement
    console.log('1Ô∏è‚É£ Initialisation du service...');
    await encryptionService.initialize('test-master-password-123');
    console.log('‚úÖ Service de chiffrement initialis√©');
    
    // Test de chiffrement/d√©chiffrement
    console.log('\n2Ô∏è‚É£ Test de chiffrement/d√©chiffrement...');
    const testTexts = [
      'password123',
      'Mot de passe avec espaces et caract√®res sp√©ciaux: √©√†√ß!@#',
      'Un texte tr√®s long avec beaucoup de caract√®res pour tester la robustesse du syst√®me de chiffrement et s\'assurer qu\'il fonctionne correctement m√™me avec des donn√©es volumineuses.',
      '',
      'mysql://user:pass@host:3306/database'
    ];
    
    for (const text of testTexts) {
      console.log(`\nTest avec: "${text}"`);
      
      const encrypted = await encryptionService.encrypt(text);
      console.log(`Chiffr√©: ${encrypted.substring(0, 50)}...`);
      
      const decrypted = await encryptionService.decrypt(encrypted);
      const success = text === decrypted;
      console.log(`D√©chiffr√©: "${decrypted}"`);
      console.log(`R√©sultat: ${success ? '‚úÖ OK' : '‚ùå ERREUR'}`);
      
      if (!success) {
        throw new Error(`Test √©chou√© pour: "${text}"`);
      }
    }
    
    // Test de hachage de mot de passe
    console.log('\n3Ô∏è‚É£ Test de hachage de mots de passe...');
    const password = 'my-secure-password';
    const { hash, salt } = await encryptionService.hashPassword(password);
    console.log(`Hash: ${hash.substring(0, 20)}...`);
    console.log(`Salt: ${salt.substring(0, 20)}...`);
    
    // V√©rification du mot de passe
    const isValid = await encryptionService.verifyPassword(password, hash, salt);
    console.log(`V√©rification: ${isValid ? '‚úÖ OK' : '‚ùå ERREUR'}`);
    
    const isInvalid = await encryptionService.verifyPassword('wrong-password', hash, salt);
    console.log(`Faux mot de passe rejet√©: ${!isInvalid ? '‚úÖ OK' : '‚ùå ERREUR'}`);
    
    // Test de g√©n√©ration d'ID
    console.log('\n4Ô∏è‚É£ Test de g√©n√©ration d\'ID...');
    const ids = Array.from({ length: 5 }, () => encryptionService.generateId());
    console.log('IDs g√©n√©r√©s:');
    ids.forEach(id => console.log(`  ${id}`));
    
    // V√©rifier l'unicit√©
    const uniqueIds = new Set(ids);
    console.log(`Unicit√©: ${uniqueIds.size === ids.length ? '‚úÖ OK' : '‚ùå ERREUR'}`);
    
    console.log('\nüéâ Tous les tests de chiffrement sont pass√©s !');
    
    // Test de performance
    console.log('\n5Ô∏è‚É£ Test de performance...');
    const iterations = 100;
    const testData = 'Test de performance avec donn√©es r√©p√©titives '.repeat(10);
    
    console.time('Chiffrement/D√©chiffrement');
    for (let i = 0; i < iterations; i++) {
      const encrypted = await encryptionService.encrypt(testData);
      const decrypted = await encryptionService.decrypt(encrypted);
      if (decrypted !== testData) {
        throw new Error(`Erreur de performance √† l'it√©ration ${i}`);
      }
    }
    console.timeEnd('Chiffrement/D√©chiffrement');
    console.log(`‚úÖ ${iterations} op√©rations compl√®tes r√©ussies`);
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors des tests:', error.message);
    console.error(error.stack);
    process.exit(1);
  } finally {
    // Nettoyage
    encryptionService.cleanup();
    console.log('\nüßπ Nettoyage termin√©');
  }
}

// Lancer les tests
testEncryption();